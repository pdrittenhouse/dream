/**
*
* @param $columns [number]: number of grid columns
* @param $card [string]: card element selector
* @param $inner [string]: card inner element selector (use if flex is needed on card inner wrapping element)
* @param $gutter [string]: width of grid gutters
* @param $mobilecolumns [boolean]: display columns on mobile
* @param $singlerow [boolean]: limit cards to a single row
* @param $featured [string]: element selector for feature card
* @param $masonry [string]: element selector for masonry grid-sizer
*
*/
@mixin flex-grid ($columns: 3, $card: '.card', $inner: null, $gutter: 30px, $mobilecolumns: false, $singlerow: false, $featured:'.featured', $masonry: false) {
  $gutters: $columns - 1;
  $gutter-total: $gutters * $gutter;
  $column-width: calc((100% - #{$gutter-total}) / #{$columns}); //number of columns per row on desktop
  $column-width-double: calc(((100% - #{$gutter-total}) / #{$columns}) * 2); //featured card width
  $column-width-triple: calc(((100% - #{$gutter-total}) / #{$columns}) * 3); //featured card width

  @if unitless($gutter-total) {
    $column-width: calc((100% - #{$gutter-total}px) / #{$columns}); //number of columns per row on desktop if unit undefined
    $column-width-double: calc(((100% - #{$gutter-total}px) / #{$columns}) * 2); //featured card width
    $column-width-triple: calc(((100% - #{$gutter-total}px) / #{$columns}) * 3); //featured card width
  }

  @if $masonry != false {
    margin: 0;
  }

  //$column-width: calc((100% - #{$gutter-total}px) / #{$columns}); //px unit may be needed.  If grids not working remove $column-width calculation on line 5 above and use this instead
  @include flexbox;
  @include flex-flow(row wrap);
  @include justify-content(space-between);

  &.slick {
    .slick-track {
      height: 100%;
    }
  }

  > #{$card},
  > #{$masonry} {
    @include flex(0 1 100%);
    margin-bottom: rem-calc($gutter);

    @if $inner != null {
      @include flexbox;
      @include flex-flow(row wrap);
      > #{$inner} {
        @include flex(0 1 100%);
      }
    }

    @if $mobilecolumns == true {
      @include media-breakpoint-down(md) {
        @include flex(0 1 calc((100% - #{$gutter}) / 2));
      }
    }

    @if $columns == 2 { //2 Column Flex Card Grid
      @include media-breakpoint-up(md) {
        @include flex(0 1 $column-width);
      }
      @if $singlerow == true {
        &:nth-of-type(n+3) {
          @include remove;
        }
      }
      &#{$featured} {
        @include media-breakpoint-up(md) {
          @include flex(0 1 $column-width-double);
        }
      }
    }

    @else if $columns == 3 { //3 Column Flex Card Grid
      @include media-breakpoint-up(md) {
        @include flex(0 1 $column-width);
      }
      @if $singlerow == true {
        &:nth-of-type(n+4) {
          @include remove;
        }
      }
      &#{$featured} {
        @include media-breakpoint-up(md) {
          @include flex(0 1 $column-width-double);
        }
      }
    }

    @else if $columns == 4 { //4 Column Flex Card Grid
      @include media-breakpoint-between(md, lg) {
        @include flex(0 1 calc((100% - #{$gutter}) / 2));
      }
      @include media-breakpoint-up(lg) {
        @include flex(0 1 $column-width);
      }
      @if $singlerow == true {
        &:nth-of-type(n+5) {
          @include remove;
        }
      }
      &#{$featured} {
        @include media-breakpoint-between(md, lg) {
          @include flex(0 1 calc((#{$column-width} * #{$columns}) + #{$gutter-total}));
        }
        @include media-breakpoint-up(lg) {
          @include flex(0 1 $column-width-double);
        }
      }
    }

    @else if $columns == 5 { //5 Column Flex Card Grid
      @include media-breakpoint-between(md, lg) {
        @include flex(0 1 calc((100% - #{$gutter}) / 2));
      }
      @include media-breakpoint-up(lg) {
        @include flex(0 1 $column-width);
      }
      @if $singlerow == true {
        &:nth-of-type(n+6) {
          @include remove;
        }
      }
      &#{$featured} {
        @include media-breakpoint-between(md, lg) {
          @include flex(0 1 calc((#{$column-width} * #{$columns}) + #{$gutter-total}));
        }
        @include media-breakpoint-up(lg) {
          @include flex(0 1 $column-width-double);
        }
      }
    }

    @else if $columns == 6 { //6 Column Flex Card Grid
      @include media-breakpoint-between(md, lg) {
        @include flex(0 1 calc((100% - #{$gutter}) / 2));
      }
      @include media-breakpoint-between(lg, xl) {
        @include flex(0 1 calc((100% - (#{$gutter} * 2)) / 3));
      }
      @include media-breakpoint-up(xl) {
        @include flex(0 1 $column-width);
      }
      @if $singlerow == true {
        &:nth-of-type(n+7) {
          @include remove;
        }
      }
      &#{$featured} {
        @include media-breakpoint-between(md, xl) {
          @include flex(0 1 calc((#{$column-width} * #{$columns}) + #{$gutter-total}));
        }
        @include media-breakpoint-up(xl) {
          @include flex(0 1 $column-width);
        }
      }
    }

    @else { //Default: 1 Column Flex Card Grid
      @if $singlerow == true {
        &:nth-of-type(n+2) {
          @include remove;
        }
      }
    }
  }
}

